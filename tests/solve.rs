use rstest::rstest;
use sudokubrute::{
    board::Board,
    solve::{solve, SolveKind},
};

#[rstest]
fn finds_solution(
    #[values(
        "057468293238971645469532781926153478741896532583724916674385129892617354315249867",
        "027384165684915237531672489769231548453768921218459673175826394392147856846593712",
        "098256417476918253512743698185674329924835761763129845257361984831492576649587132",
        "865379412924581376713642895397164528482790631156823947541236789679418203238957164",
        "865714329917362845234598761142657983783940256596283174358176492429835607671429538",
        "268495317194673852735128964872549631651380249943216785326951478589764103417832596",
        "967254018184379562253186947691740235835621794042593681376415829428967153509832476",
        "251479038948316752637258194365120879712983465094567213423691587179845326506732941",
        "256734098891265374347198652514680729728519436063427581135942867689371245402856913"
    )]
    board: &str,
    #[values(SolveKind::Backtracking)] solve_kind: SolveKind,
) {
    let board = Board::generate(board);
    assert!(board.is_some());
    let board = board.unwrap();
    assert!(!board.is_filled());
    let board = solve(solve_kind, board);
    assert!(board.is_some());
    let board = board.unwrap();
    assert!(board.is_filled());
}
